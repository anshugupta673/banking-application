A complete backend system from scratch using PostgreSQL, Golang and Docker/Kubernetes.

Service we design will provide APIs for the frontend to following:
1. Create and manage bank accounts.
2. Record all balance changes to each of the accounts.
3. Perform a money transfer between 2 accounts. (following the property of ATOMICITY)

1. Design DB Schema (visit: dbdiagram.io and watch fireship sql video)
(refer thru the SQL-Cheat and RIDDHI DUTTA DBMS Sheet)  
-We need 3 CREATE TABLE queries to create the accounts, entries and transfers table.
Then 3 ALTER TABLE queries to add foreign keys to the tables.
Then 5 CREATE INDEX queries to create all the indexes.
And finally 2 COMMENT queries to add the comments to the amount columns.

2. Create DB-schema (Docker+Postgres+TablePlus)
a) Pull Postgres image: docker pull postgres:12-alpine /* The syntax to pull an image is docker pull <image_name>:<tag> */
docker images
b) Run Postgres container: (start a Postgres database server container) docker run --name postgres12 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=90483 -d postgres:12-alpine
c) Docker port mapping: 
(Well, basically, a docker container is running in a separate virtual network, which is different from the host network that we’re on.
So we cannot simply connect to the Postgres server running on port 5432 of the container network, unless we tell docker to create one kind of "bridge" between our localhost’s network and the container’s network.)
docker run --name postgres12 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=90483 -p 5432:5432 -d postgres:12-alpine
d) Access Postgres console: (now since the Postgres server is ready we just need to access the Postgres console) docker exec -it postgres12 psql -U root
e) Setup a dB connection and create a simpel bank schema.

3. Write and run database migration
a) When working with database, schema migration is one important task that we often have to do throughout the application lifetime to adapt to new business requirements.
b) install golang-migrate
c) Migrate gives us several commands:
The first one is create, which we can use to create new migration files.
The 2nd one is goto, which will migrate the schema to a specific version.
Then the up or down commands to apply all or N up or down migrations.
d) create a new-migration db/migration

4) CRUD operations on the database 
a) sqlc to generat CRUD code for the project.

5) Go unit tests for db CRUD with random data
